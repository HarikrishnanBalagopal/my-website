{"version":3,"sources":["node_modules/@haribala/waves-element.js/src/shaders/vertex-shader.vert","node_modules/@haribala/waves-element.js/src/shaders/fragment-shader.frag","node_modules/@haribala/waves-element.js/src/shaders/update-shader.frag","node_modules/@haribala/waves-element.js/src/waves-element.js"],"names":["cout","console","log","bind","peak","uv","pos","size","dx","x","dy","y","d","Math","sqrt","exp","calculate_initial_condition","R","C","arr","Float32Array","peak_pos","peak_size","r","c","i","init","canvas","initial_condition","gl","getContext","alert","ext","getExtension","vertexShader","createShader","VERTEX_SHADER","vertexShaderSource","updateShader","FRAGMENT_SHADER","updateShaderSource","fragmentShader","fragmentShaderSource","updateProgram","createProgram","program","positionAttributeLocation","getAttribLocation","isVelocityUpdateLocation","getUniformLocation","updateImageLocation","iTimeDeltaLocation","iMouseLocation","imageLocation","texture1","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","mipLevel","internalFormat","RG32F","texWidth","texHeight","texBorder","srcFormat","RG","srcType","FLOAT","texImage2D","texture2","TEXTURE1","attachmentPoint","COLOR_ATTACHMENT0","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","frameBufferStatus","checkFramebufferStatus","statuses","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","positions","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","type","normalize","stride","offset","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","vertexAttribPointer","mouseData","mouse_x","mouse_y","mouse_updated","is_dragging","addEventListener","e","rect","target","getBoundingClientRect","floor","clientX","left","bottom","clientY","args","prev","window","requestAnimationFrame","step","timestamp","deltaTime","useProgram","uniform1i","uniform1f","uniform3i","render","texture","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawArrays","TRIANGLES","source","shader","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","WavesElement","LitElement","styles","css","constructor","setupCanvas","updateComplete","shadowRoot","getElementById","html","customElements","define"],"mappings":"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","file":"waves-element.8cfa95b9.js","sourceRoot":"..","sourcesContent":["module.exports=\"#version 300 es\\n#define GLSLIFY 1\\n\\nin vec4 a_position;\\n\\nvoid main()\\n{\\n  gl_Position = a_position;\\n}\\n\";","module.exports=\"#version 300 es\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D u_image;\\n\\nout vec4 fragColor;\\n\\nfloat sigmoid(float x)\\n{\\n    return 1. / (1. + exp(-x));\\n}\\n\\nvec3 floatToRgb(float v, float scale) {\\n    float r = v;\\n    float g = mod(v*scale,1.0);\\n    r-= g/scale;\\n    float b = mod(v*scale*scale,1.0);\\n    g-=b/scale;\\n    return vec3(r,g,b);\\n}\\n\\nvoid main()\\n{\\n    vec2 fragCoord = gl_FragCoord.xy;\\n    vec2 iResolution = vec2(256., 256.);\\n\\n    // get current x and y.\\n    fragCoord -= 0.5; // pixel coordinates are given as mid intergers, subtract 0.5 to make it interger.\\n    ivec2 center = ivec2(fragCoord);\\n    ivec2 res    = ivec2(iResolution) - 1;\\n\\n    float pos = texelFetch(u_image, center, 0).y;\\n\\n    // vec3 col = floatToRgb(pos, 256.);\\n    vec3 col = vec3(sigmoid(pos), sin(pos), cos(pos));\\n    // vec3 col = vec3(sigmoid(pos));\\n\\n    fragColor = vec4(col, 1.0);\\n}\\n\";","module.exports=\"#version 300 es\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D i_image;\\nuniform bool is_velocity_update;\\nuniform float iTimeDelta;\\nuniform ivec3 iMouse;\\n\\nout vec4 fragColor;\\n\\n#define SPRING_CONSTANT .04\\n#define PROP_SPEED 1.\\n#define MASS 10.\\n#define FRICTION_COEFF 0.005\\n#define PEAK_SIZE .2\\n#define MAX_VELOCITY_MAGNITUDE 10.\\n#define MAX_DISPLACEMENT 64.\\n\\nfloat sigmoid(float x)\\n{\\n    return 1. / (1. + exp(-x));\\n}\\n\\nfloat peak(ivec2 center, ivec2 pos, float size)\\n{\\n    float d = length(vec2(center) - vec2(pos));\\n    float e = exp(-size * d);\\n    return e;\\n}\\n\\nvoid main()\\n{\\n    vec2 fragCoord = gl_FragCoord.xy;\\n    vec2 iResolution = vec2(256., 256.);\\n\\n    // get current x and y.\\n    fragCoord -= 0.5; // pixel coordinates are given as mid intergers, subtract 0.5 to make it interger.\\n    ivec2 center = ivec2(fragCoord);\\n    ivec2 res    = ivec2(iResolution) - 1;\\n\\n    // if it is a boundary cell velocity is 0.\\n    if(center.x == 0 || center.y == 0 || center.x == res.x || center.y == res.y)\\n    {\\n        fragColor = vec4(vec3(0.), 1.0);\\n        return;\\n    }\\n\\n    ivec2 left   = center + ivec2(-1,  0);\\n    ivec2 top    = center + ivec2( 0,  1);\\n    ivec2 right  = center + ivec2( 1,  0);\\n    ivec2 bottom = center + ivec2( 0, -1);\\n\\n    // get previous z coordinate of current cell and neighbour cells.\\n\\tfloat pos_c = texelFetch(i_image, center, 0).y;\\n\\n\\tfloat pos_l = texelFetch(i_image, left  , 0).y;\\n\\tfloat pos_t = texelFetch(i_image, top   , 0).y;\\n\\tfloat pos_r = texelFetch(i_image, right , 0).y;\\n\\tfloat pos_b = texelFetch(i_image, bottom, 0).y;\\n\\n    // get previous velocity of current cell.\\n\\tfloat vel   = texelFetch(i_image, center, 0).x;\\n\\n    // get 3d positions.\\n    vec3 pos_cv = vec3(vec2(center), pos_c);\\n\\n    if(is_velocity_update)\\n    {\\n        // UPDATE VELOCITIES\\n        // Channel 0 is previous velocities (x coordinate) and previous positions (y coordinate).\\n\\n        vec3 pos_lv = vec3(vec2(left  ), pos_l);\\n        vec3 pos_tv = vec3(vec2(top   ), pos_t);\\n        vec3 pos_rv = vec3(vec2(right ), pos_r);\\n        vec3 pos_bv = vec3(vec2(bottom), pos_b);\\n\\n        // calculate total force using Hooke's law.\\n        vec3 force_l = (pos_lv - pos_cv);\\n        vec3 force_t = (pos_tv - pos_cv);\\n        vec3 force_r = (pos_rv - pos_cv);\\n        vec3 force_b = (pos_bv - pos_cv);\\n\\n        force_l = normalize(force_l) * (length(force_l) - 1.) * SPRING_CONSTANT;\\n        force_t = normalize(force_t) * (length(force_t) - 1.) * SPRING_CONSTANT;\\n        force_r = normalize(force_r) * (length(force_r) - 1.) * SPRING_CONSTANT;\\n        force_b = normalize(force_b) * (length(force_b) - 1.) * SPRING_CONSTANT;\\n\\n        // gravity\\n        vec3 force_g = vec3(0.); // ZERO GRAVITY\\n        // vec3 force_g = vec3(0., 0., -0.001 * MASS); // VERY LOW GRAVITY\\n        // vec3 force_g = vec3(0., 0., -1.62 * MASS); // MOON\\n        // vec3 force_g = vec3(0., 0., -9.807 * MASS); // EARTH\\n\\n        vec3 total_force = force_l + force_t + force_r + force_b + force_g;\\n\\n        // calculate acceleration and velocity.\\n        float acc = total_force.z / MASS;\\n        vel = (1. - FRICTION_COEFF) * vel + acc * iTimeDelta * PROP_SPEED;\\n        //vel = (1. - FRICTION_COEFF * screen_center_dist(center)) * vel + acc * iTimeDelta * PROP_SPEED;\\n\\n        // clamp velocity.\\n        vel = clamp(vel, -MAX_VELOCITY_MAGNITUDE, MAX_VELOCITY_MAGNITUDE);\\n\\n        // output current velocity and previous position.\\n        fragColor = vec4(vel, pos_c, 0., 1.0);\\n    }\\n    else\\n    {\\n        // UPDATE POSITIONS\\n        // Channel 0 is previous velocities (x coordinate) and previous positions (y coordinate).\\n\\n        // calculate new position.\\n        pos_c = pos_c + vel * iTimeDelta * PROP_SPEED;\\n\\n        // if LMB is down insert a peak at the click position.\\n        ivec2 click = iMouse.xy;\\n        if(iMouse.z == 1)pos_c += 10. * peak(center, click, PEAK_SIZE);\\n        // pos_c = 0.;\\n\\n        // clamp the position.\\n        pos_c = clamp(pos_c, -MAX_DISPLACEMENT, MAX_DISPLACEMENT);\\n\\n        // output current velocity and current position.\\n        fragColor = vec4(vel, pos_c, 0., 1.0);\\n    }\\n}\\n\\n/*\\n\\n\\nfloat screen_center_dist(ivec2 pos)\\n{\\n    ivec2 screen_center = ivec2(iResolution) / 2;\\n    float d = length(vec2(pos) - vec2(screen_center));\\n    return sigmoid(d);\\n}\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*/\\n\\n/*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*/\";","import { LitElement, html, css } from 'lit-element';\r\nimport vertexShaderSource from './shaders/vertex-shader.vert';\r\nimport fragmentShaderSource from './shaders/fragment-shader.frag';\r\nimport updateShaderSource from './shaders/update-shader.frag';\r\n\r\nconst cout = console.log.bind(console);\r\n\r\nfunction peak(uv, pos, size)\r\n{\r\n    const dx = uv.x - pos.x, dy = uv.y - pos.y;\r\n    const d = Math.sqrt(dx * dx + dy * dy);\r\n    return Math.exp(- size * d);\r\n}\r\n\r\nfunction calculate_initial_condition(R, C)\r\n{\r\n    // The initial condition is a peak at the center of the screen.\r\n    const arr = new Float32Array(R * C * 2);\r\n    const peak_pos = {x: 0.5, y: 0.5};\r\n    const peak_size = 10;\r\n    for(let r = 1; r < R - 1; r++)\r\n    {\r\n        for(let c = 1; c < C - 1; c++)\r\n        {\r\n            const i = 2 * (r * C + c);\r\n            const uv = {x: (c / R), y: (r/ R)};\r\n            arr[i + 1] = peak(uv, peak_pos, peak_size); // position\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nfunction init(canvas)\r\n{\r\n    const initial_condition = calculate_initial_condition(256, 256);\r\n\r\n    const gl = canvas.getContext('webgl2');\r\n\r\n    if (!gl) {\r\n        alert('No webgl2 support on your device!!');\r\n        return;\r\n    }\r\n\r\n    const ext = (gl.getExtension('EXT_color_buffer_float'));\r\n    if (!ext) {\r\n        alert('No support for rendering to floating point textures on your device!!');\r\n        return;\r\n    }\r\n\r\n    // Compile all the shaders.\r\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const updateShader = createShader(gl, gl.FRAGMENT_SHADER, updateShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create and link all shader programs.\r\n    const updateProgram = createProgram(gl, vertexShader, updateShader);\r\n    const program = createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    // Get locations of shader inputs.\r\n    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\r\n    const isVelocityUpdateLocation = gl.getUniformLocation(updateProgram, 'is_velocity_update');\r\n    const updateImageLocation = gl.getUniformLocation(updateProgram, 'i_image');\r\n    const iTimeDeltaLocation = gl.getUniformLocation(updateProgram, 'iTimeDelta');\r\n    const iMouseLocation = gl.getUniformLocation(updateProgram, 'iMouse');\r\n    const imageLocation = gl.getUniformLocation(program, 'u_image');\r\n\r\n    // Configure texture 1.\r\n    const texture1 = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    const mipLevel = 0, internalFormat = gl.RG32F, texWidth = 256, texHeight = 256, texBorder = 0, srcFormat = gl.RG, srcType = gl.FLOAT;\r\n    gl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, texWidth, texHeight, texBorder, srcFormat, srcType, initial_condition);\r\n\r\n    // Configure texture 2.\r\n    const texture2 = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, texWidth, texHeight, texBorder, srcFormat, srcType, new Float32Array(256 * 256 * 2));\r\n\r\n    // Create a framebuffer for rendering to texture.\r\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture2, 0);\r\n\r\n    // Check framebuffer status and report errors.\r\n    const frameBufferStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    const statuses = {\r\n        [gl.FRAMEBUFFER_COMPLETE]: 'complete',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]: 'incomplete attachment',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]: 'missing attachment',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]: 'height and width of attachment are not the same',\r\n        [gl.FRAMEBUFFER_UNSUPPORTED]: 'format of the attachedment is not supported or some other conditions',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE]: 'the values of gl.RENDERBUFFER_SAMPLES are different among different attached renderbuffers or are non zero if attached images are a mix of render buffers and textures'\r\n    };\r\n    // cout('framebuffer status:', frameBufferStatus, statuses[frameBufferStatus]);\r\n    if(frameBufferStatus != gl.FRAMEBUFFER_COMPLETE)\r\n    {\r\n        alert('Failed to create a framebuffer!!');\r\n        return;\r\n    }\r\n\r\n    // Upload rectangle coordinates.\r\n    const positions = [\r\n        -1, -1,\r\n        -1,  1,\r\n         1,  1,\r\n         1,  1,\r\n         1, -1,\r\n        -1, -1\r\n    ];\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    // Create a VAO to read the position data.\r\n    const size = 2, type = gl.FLOAT, normalize = false, stride = 0, offset = 0;\r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n    // Data to handle mouse events.\r\n    const mouseData = {mouse_x: 0, mouse_y: 0, mouse_updated: false, is_dragging: false};\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n        mouseData.is_dragging = true;\r\n        const rect = e.target.getBoundingClientRect();\r\n        mouseData.mouse_x = Math.floor(e.clientX - rect.left); //x position within the element.\r\n        mouseData.mouse_y = Math.floor(rect.bottom - e.clientY);  //y position within the element.\r\n        mouseData.mouse_updated = true;\r\n        // cout(mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated);    \r\n    });\r\n    canvas.addEventListener('mousemove', e => {\r\n        if(mouseData.is_dragging)\r\n        {\r\n            const rect = e.target.getBoundingClientRect();\r\n            mouseData.mouse_x = Math.floor(e.clientX - rect.left); //x position within the element.\r\n            mouseData.mouse_y = Math.floor(rect.bottom - e.clientY);  //y position within the element.\r\n            mouseData.mouse_updated = true;\r\n            // cout(mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated);    \r\n        }\r\n    });\r\n    canvas.addEventListener('mouseup', () => {\r\n        mouseData.is_dragging = false;\r\n    });\r\n    canvas.addEventListener('mouseleave', () => {\r\n        mouseData.is_dragging = false;\r\n    });\r\n    // Arguments passed to update step.\r\n    const args = {\r\n        gl, program, attachmentPoint, updateProgram, vao, iMouseLocation, iTimeDeltaLocation, isVelocityUpdateLocation, imageLocation, updateImageLocation, frameBuffer, texture1, texture2, prev: 0, mouseData\r\n    };\r\n    window.requestAnimationFrame(step.bind(null, args));\r\n}\r\n\r\nfunction step(args, timestamp)\r\n{\r\n    // Update velocities and positions and render a single frame.\r\n\r\n    const {\r\n        gl, program, attachmentPoint, updateProgram, vao, iMouseLocation, iTimeDeltaLocation, isVelocityUpdateLocation, imageLocation, updateImageLocation, frameBuffer, texture1, texture2, prev, mouseData\r\n    } = args;\r\n    const deltaTime = timestamp - prev;\r\n\r\n    // Run the update program for veloctiy update.\r\n    gl.useProgram(updateProgram);\r\n    gl.uniform1i(isVelocityUpdateLocation, 1);\r\n    gl.uniform1f(iTimeDeltaLocation, deltaTime);\r\n    gl.uniform3i(iMouseLocation, mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated ? 1 : 0);\r\n    render(gl, updateProgram, vao, updateImageLocation, 0, frameBuffer);\r\n\r\n    // Swap textures.\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture1, 0);\r\n\r\n    // Run the update program for position update.\r\n    gl.useProgram(updateProgram);\r\n    gl.uniform1i(isVelocityUpdateLocation, 0);\r\n    render(gl, updateProgram, vao, updateImageLocation, 0, frameBuffer);\r\n\r\n    // Swap textures again.\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture2, 0);\r\n\r\n    // Run the render program.\r\n    render(gl, program, vao, imageLocation, 0, null);\r\n\r\n    mouseData.mouse_updated = false;\r\n    window.requestAnimationFrame(step.bind(null, {...args, prev: timestamp}));\r\n}\r\n\r\nfunction render(gl, program, vao, imageLocation, texture, frameBuffer)\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // clear viewport\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(0, 0, 0, 0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // render\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    gl.uniform1i(imageLocation, texture);\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n}\r\n\r\nfunction createShader(gl, type, source)\r\n{\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if(success)return shader;\r\n\r\n    cout('Failed to compile the shader:', type);\r\n    console.log(gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n}\r\n\r\nfunction createProgram(gl, vertexShader, fragmentShader)\r\n{\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(success)return program;\r\n\r\n    cout('Failed to compile the shader program.');\r\n    console.log(gl.getProgramInfoLog(program));\r\n    gl.deleteProgram(program);\r\n}\r\n\r\nexport class WavesElement extends LitElement\r\n{\r\n    static get styles()\r\n    {\r\n        return css`\r\n            /* Selects the host element */\r\n            :host { display: inline-block;}\r\n            /* Selects the host element if it is hidden */\r\n            :host([hidden]) { display: none; }\r\n        `;\r\n    }\r\n    constructor()\r\n    {\r\n        super();\r\n        this.setupCanvas();\r\n    }\r\n    async setupCanvas()\r\n    {\r\n        await this.updateComplete;\r\n\r\n        const canvas = this.shadowRoot.getElementById('webgl-canvas');\r\n        init(canvas);\r\n    }\r\n    render()\r\n    {\r\n        return html`\r\n            <canvas id=\"webgl-canvas\" width=\"256\" height=\"256\"></canvas>\r\n        `;\r\n    }\r\n}\r\n\r\ncustomElements.define('waves-element', WavesElement);"]}